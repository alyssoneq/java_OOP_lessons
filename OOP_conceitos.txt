- IDEIA CENTRAL DA PROGRAMAÇÃO ORIENTADA A OBJETOS

	Construir programa usando conceitos e abstrações do mundo real, como
objetos, troca de mensagens. 

- principais conceitos:
	* Coisas importantes do sistema = objetos
	* Classe = repositório para comportamento associado a um objeto
	* Classes são organizadas em hierarquia
	* Células enviam mensagens para outras células para um objetivo
	* Objetos executam tarefas por requisição de serviços a outros objetos
	* Cada objeto pertence a uma determinada classe
	* Classe pode agrupar objetos similares

- PARADIGMA DA OOP

	Um programa é visto como um conjunto de objetos que se comunicam 
através de mensagens. 

	Fundamentada em 4 pilares do princípio da abstração:
		* Encapsulamento
		* Herança
		* Composição
		* Polimorfismo

	Princípio da abstração:
		* Capacidade de abstrair complexidade em partes menores

- OBJETOS

	São usados para representar entidades do mundo real ou computacional.
Objetos representam elementos e abstraçoes que fazem parte da solução do programa
Exemplos: Pessoas, carros, móveis...

	As características dos objetos são chamadas de atributos. Exemplo:
Pessoa --> RG, CPF, nome. Carro --> cor, modelo, ano. Objetos podem ter comportamentos
associados, como andar, correr, ligar, acelerar...
	Características = dados ou atributos
	Comportamentos = métodos ou operações

- CLASSES

	Conjunto de objetos com atributos e métodos semelhantes. É um molde  para
a criação de um dado objeto. Objetos são instâncias das classes.

	Sintaxe de uma classe:

	class Carro{
		String tipo;
		String cor;
		String placa;
	}

	Regras para escolher nome do atributo:
		* sequencia de letras unicode e dígitos
		* inicia sempre com letra, $ ou _
		* aceita letras, dígitos, $ e _
		* espaços não são permitidos
		* não permitido palavras reservadas:
			@float
			@void
			@class
			@int
			@for
			@while...
		* case sensitive
		* utilizar nomes completos para facilitar compreensão

- MÉTODOS

	A palavra "this" é adicionada antes do atributo --> representa a
instância da classe. Informa ao compilador a referência ao atributo da classe.

Boa prática:
	* sempre usar a palavra this antes do atributo
	* essa prática evita problema de ambiguidade
	* isso é feito pois o compilador prioza parâmetro do método

Sintaxe básica de um método contém:
	*tipo de acesso ao método (public, private, protected)
	*nome do método
	*tipo de retorno (objeto ou primitivo)
	*um ou mais parâmetros
	*corpo do método

- ENCAPSULAMENTO

	Característica de ocultar partes(dados e detalhes) de implementação 
interna de classes. Permite ver as classes apenas pelos serviços (métodos)
oferecidos. Define as interações com os objetos da classe.
	Objeto só disponibiliza, por meio da interface, os serviços que recebem
solicitações de outros objetos. 

- MODIFICADORES DE ACESSO

	Palavras reservadas que permitem ou proibem o acesso aos atributos e/ou
métodos das classes

public: acesso ou execução a partir de qualquer outra classe

private: acesso, modificação ou execução apenas por métodos da mesma classe

protected: funciona como private, mas classes filhas ou derivadas têm acesso

package ou friendly: atributo ou método sem modificador. Acesso a tudo no pacote


- COMPOSIÇÃO OU AGREGAÇÃO

	Mecanismos de reaproveitamento de classes. Visa aumentar produtividade
e qualidade no desenvolvimento de software

Reaproveitamento:
	* usar uma ou varias classes para compor outra classe

Aumento de produtividade:
	* Não necessidade de reescrever código

Aumento de qualidade:
	* Reutilizar classe já testada reduz chance de erro


- HERANÇA

	Mecanismo que permite uma classe herdar todos atributos e métodos de 
outra classe. 

	hierarquia de classe: mapeamento do relacionamentos entre as classes.
Quanto mais alta na hierarquia, mais abstrata. 

Termos para quem fornece a herança:
	* superclasse
	* mãe
	* tipo

Termos para quem herda:
	* subclasse
	* filha
	* subtipo

Outros termos:
	* Ancestral --> classe acima da progenitora (mãe)
	* Descendente --> classe abaixo da atual
	* Raiz ou base --> classe do topo da hierarquia
	* Folha --> classe sem filhas

	A classe filha não pode remover os atributos e métodos da mãe. 

Generalização --> classes abstratas e mais genéricas

especialização --> classes em posições inferiores na hierarquia / mais detalhes

herança multipla --> classe herda mais de uma superclasse

herança simples --> cada classe só tem uma superclasse

	Em java:
	   * interfaces --> herança multipla
	   * extends --> herança simples

O modificador protected pode ser utilizado para liberar acesso às classes
filhas, porém negar acesso à classe main


palavra reservada super() --> utilizada para chamar classe mãe logo acima

caso super() seja utilizado em uma classe mãe raiz, então a classe Object é
chamada, pois a classe Object é ancestral de todas as classes.

Dicas para utilizar o super():
	* apenas comentários antes da palavra super dentro de construtores
	* super pode ser usado para acessar atributos da classe


- POLIMORFISMO

	é a habilidade de objetos de classes diferentes responderem a mesma
mensagem de diferentes maneiras.
	
- tipos de polimorfismo:
	* sobrecarga
	* sobreposição
	* inclusão

- polimorfismo de sobrecarga:
	* método tem comportamento distinto, em função de parâmetros recebidos
	* cada método difere no número e no tipo de parâmetros
	* normalmente acontece sobre métodos construtores
	* conversão --> capacidade de um tipo ser convertido em outro
	* java converte um tipo de dado em outro sempre que apropriado
	* conversão automática ocorrem quando há garantia de não haver perda
	  de informação
	* Não confundi conversão com polimorfismo

- polimorfismo de sobreposição:
	* redefinição de métodos em classes descendentes
	* método em classe filha com mesmo nome de método da classe mãe

- polimorfismo de inclusão:
	* usa a capacidade de substituição da herança
	* subsitui classe mãe por filha
	* capacidade de objeto receber qualquer objeto de subclasses da mãe


- COLLECTIONS E ARRAYS

	Array é o conjunto de valores do mesmo tipo, ou seja, type-safe ou 
de tipagem forte ou fortemente tipado. 

syntax de declaração array unidimensional:
	double[] nomeArray = new double[númeroDeElementos];

- dimensão de array:
	* Conjunto de valores definidos para localizar uma informação
	 
syntax de declaração array bidimensional:
	double[][] nomeArray = new double[][];

	Array são estruturas para armazenar objetos. Array também é um objeto.
Por ser um objeto, o array possui métodos e atributos úteis.
	Um atributo muito útil é o length --> bastante utilizado para determinar
comprimento do array, então basilar limite de processamento

- collections:
	* conjunto de classes para armazenar varios objetos na memória
	* não tem tamanho nem tipo fixos

- tipo de collections:
	* List --> lista de coisas
	* Set --> lista que não permite repetição de elementos
	* map --> lista de coisas com identificador único

	hashCode --> mecanismo de ordenação e recuperação de dados. Permite
pesquisa de maneira rápida.

- generics:
	* sintaxe Generics força uma coleção a receber um único tipo de dado
	* garante que tudo retornado é do tipo determinado
	
	sintaxe do generics:
		List<String> myList = new ArrayList<String>();

- ENHANCED LOOP

	Maneira de percorrer uma coleção. É uma versão aprimorada do loop for.

- syntax:
	for(tipo declaração : expressão){
	    corpo do loop
	}

	declaração --> variável utilizada no corpo do loop
	expressão --> array ou coleção para iterar

