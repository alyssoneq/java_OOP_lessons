- ideia principal

	Construir programa usando conceitos e abstrações do mundo real, como
objetos, troca de mensagens. 

- principais conceitos:
	* Coisas importantes do sistema = objetos
	* Classe = repositório para comportamento associado a um objeto
	* Classes são organizadas em hierarquia
	* Células enviam mensagens para outras células para um objetivo
	* Objetos executam tarefas por requisição de serviços a outros objetos
	* Cada objeto pertence a uma determinada classe
	* Classe pode agrupar objetos similares

- Paradigma da programação orientada a objetos

	Um programa é visto como um conjunto de objetos que se comunicam 
através de mensagens. 

	Fundamentada em 4 pilares do princípio da abstração:
		* Encapsulamento
		* Herança
		* Composição
		* Polimorfismo

	Princípio da abstração:
		* Capacidade de abstrair complexidade em partes menores

- Objetos

	São usados para representar entidades do mundo real ou computacional.
Objetos representam elementos e abstraçoes que fazem parte da solução do programa
Exemplos: Pessoas, carros, móveis...

	As características dos objetos são chamadas de atributos. Exemplo:
Pessoa --> RG, CPF, nome. Carro --> cor, modelo, ano. Objetos podem ter comportamentos
associados, como andar, correr, ligar, acelerar...
	Características = dados ou atributos
	Comportamentos = métodos ou operações

- Classes

	Conjunto de objetos com atributos e métodos semelhantes. É um molde  para
a criação de um dado objeto. Objetos são instâncias das classes.

	Sintaxe de uma classe:

	class Carro{
		String tipo;
		String cor;
		String placa;
	}

	Regras para escolher nome do atributo:
		* sequencia de letras unicode e dígitos
		* inicia sempre com letra, $ ou _
		* aceita letras, dígitos, $ e _
		* espaços não são permitidos
		* não permitido palavras reservadas:
			@float
			@void
			@class
			@int
			@for
			@while...
		* case sensitive
		* utilizar nomes completos para facilitar compreensão

- Métodos

	A palavra "this" é adicionada antes do atributo --> representa a
instância da classe. Informa ao compilador a referência ao atributo da classe.

Boa prática:
	* sempre usar a palavra this antes do atributo
	* essa prática evita problema de ambiguidade
	* isso é feito pois o compilador prioza parâmetro do método

Sintaxe básica de um método contém:
	*tipo de acesso ao método (public, private, protected)
	*nome do método
	*tipo de retorno (objeto ou primitivo)
	*um ou mais parâmetros
	*corpo do método

- Encapsulamento

	Característica de ocultar partes(dados e detalhes) de implementação 
interna de classes. Permite ver as classes apenas pelos serviços (métodos)
oferecidos. Define as interações com os objetos da classe.
	Objeto só disponibiliza, por meio da interface, os serviços que recebem
solicitações de outros objetos. 

- Modificadores de acesso

	Palavras reservadas que permitem ou proibem o acesso aos atributos e/ou
métodos das classes

public: acesso ou execução a partir de qualquer outra classe

private: acesso, modificação ou execução apenas por métodos da mesma classe

protected: funciona como private, mas classes filhas ou derivadas têm acesso

package ou friendly: atributo ou método sem modificador. Acesso a tudo no pacote


